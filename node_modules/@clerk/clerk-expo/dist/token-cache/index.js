"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var token_cache_exports = {};
__export(token_cache_exports, {
  tokenCache: () => tokenCache
});
module.exports = __toCommonJS(token_cache_exports);
var SecureStore = __toESM(require("expo-secure-store"));
var import_utils = require("../utils");
const createTokenCache = () => {
  const secureStoreOpts = {
    /**
     * The data in the keychain item cannot be accessed after a restart until the
     * device has been unlocked once by the user.
     *
     * This may be useful if you need to access the item when the phone is locked.
     */
    keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK
  };
  return {
    getToken: async (key) => {
      try {
        const item = await SecureStore.getItemAsync(key, secureStoreOpts);
        return item;
      } catch {
        await SecureStore.deleteItemAsync(key, secureStoreOpts);
        return null;
      }
    },
    saveToken: (key, token) => {
      return SecureStore.setItemAsync(key, token, secureStoreOpts);
    }
  };
};
const tokenCache = (0, import_utils.isNative)() ? createTokenCache() : void 0;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  tokenCache
});
//# sourceMappingURL=index.js.map