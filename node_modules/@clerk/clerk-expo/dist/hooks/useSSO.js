"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useSSO_exports = {};
__export(useSSO_exports, {
  useSSO: () => useSSO
});
module.exports = __toCommonJS(useSSO_exports);
var import_clerk_react = require("@clerk/clerk-react");
var AuthSession = __toESM(require("expo-auth-session"));
var WebBrowser = __toESM(require("expo-web-browser"));
var import_errors = require("../utils/errors");
function useSSO() {
  const { signIn, setActive, isLoaded: isSignInLoaded } = (0, import_clerk_react.useSignIn)();
  const { signUp, isLoaded: isSignUpLoaded } = (0, import_clerk_react.useSignUp)();
  async function startSSOFlow(startSSOFlowParams) {
    var _a, _b, _c;
    if (!isSignInLoaded || !isSignUpLoaded) {
      return {
        createdSessionId: null,
        authSessionResult: null,
        signIn,
        signUp,
        setActive
      };
    }
    const { strategy, unsafeMetadata } = startSSOFlowParams != null ? startSSOFlowParams : {};
    const redirectUrl = (_a = startSSOFlowParams.redirectUrl) != null ? _a : AuthSession.makeRedirectUri({
      path: "sso-callback"
    });
    await signIn.create({
      strategy,
      redirectUrl,
      ...startSSOFlowParams.strategy === "enterprise_sso" ? { identifier: startSSOFlowParams.identifier } : {}
    });
    const { externalVerificationRedirectURL } = signIn.firstFactorVerification;
    if (!externalVerificationRedirectURL) {
      return import_errors.errorThrower.throw("Missing external verification redirect URL for SSO flow");
    }
    const authSessionResult = await WebBrowser.openAuthSessionAsync(
      externalVerificationRedirectURL.toString(),
      redirectUrl
    );
    if (authSessionResult.type !== "success" || !authSessionResult.url) {
      return {
        createdSessionId: null,
        setActive,
        signIn,
        signUp,
        authSessionResult
      };
    }
    const params = new URL(authSessionResult.url).searchParams;
    const rotatingTokenNonce = (_b = params.get("rotating_token_nonce")) != null ? _b : "";
    await signIn.reload({ rotatingTokenNonce });
    const userNeedsToBeCreated = signIn.firstFactorVerification.status === "transferable";
    if (userNeedsToBeCreated) {
      await signUp.create({
        transfer: true,
        unsafeMetadata
      });
    }
    return {
      createdSessionId: (_c = signUp.createdSessionId) != null ? _c : signIn.createdSessionId,
      setActive,
      signIn,
      signUp,
      authSessionResult
    };
  }
  return {
    startSSOFlow
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useSSO
});
//# sourceMappingURL=useSSO.js.map